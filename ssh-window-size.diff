diff -r 5ff5636e18c9 ssh/channel.go
--- a/ssh/channel.go	Thu Oct 17 08:54:15 2013 +1100
+++ b/ssh/channel.go	Sun Oct 27 12:33:08 2013 +0100
@@ -22,6 +22,11 @@
 
 	// minPacketLength defines the smallest valid packet
 	minPacketLength = 9
+
+	// advMaxPacketSize defines the maximum packet size advertised in open messages
+	advMaxPacketSize = 1 << 15 // RFC 4253 6.1
+	// advInitialWindowSize defines the window size advertised in open messages
+	advInitialWindowSize = 64 * advMaxPacketSize // Like OpenSSH
 )
 
 // A Channel is an ordered, reliable, duplex stream that is multiplexed over an
diff -r 5ff5636e18c9 ssh/client.go
--- a/ssh/client.go	Thu Oct 17 08:54:15 2013 +1100
+++ b/ssh/client.go	Sun Oct 27 12:33:08 2013 +0100
@@ -349,10 +349,10 @@
 		m := channelOpenConfirmMsg{
 			PeersId:  ch.remoteId,
 			MyId:     ch.localId,
-			MyWindow: 1 << 14,
+			MyWindow: advInitialWindowSize,
 
 			// As per RFC 4253 6.1, 32k is also the minimum.
-			MaxPacketSize: 1 << 15,
+			MaxPacketSize: advMaxPacketSize,
 		}
 
 		c.writePacket(marshal(msgChannelOpenConfirm, m))
diff -r 5ff5636e18c9 ssh/session.go
--- a/ssh/session.go	Thu Oct 17 08:54:15 2013 +1100
+++ b/ssh/session.go	Sun Oct 27 12:33:08 2013 +0100
@@ -567,8 +567,8 @@
 	if err := c.writePacket(marshal(msgChannelOpen, channelOpenMsg{
 		ChanType:      "session",
 		PeersId:       ch.localId,
-		PeersWindow:   1 << 14,
-		MaxPacketSize: 1 << 15, // RFC 4253 6.1
+		PeersWindow:   advInitialWindowSize,
+		MaxPacketSize: advMaxPacketSize,
 	})); err != nil {
 		c.chanList.remove(ch.localId)
 		return nil, err
diff -r 5ff5636e18c9 ssh/tcpip.go
--- a/ssh/tcpip.go	Thu Oct 17 08:54:15 2013 +1100
+++ b/ssh/tcpip.go	Sun Oct 27 12:33:08 2013 +0100
@@ -299,8 +299,8 @@
 	if err := c.writePacket(marshal(msgChannelOpen, channelOpenDirectMsg{
 		ChanType:      "direct-tcpip",
 		PeersId:       ch.localId,
-		PeersWindow:   1 << 14,
-		MaxPacketSize: 1 << 15, // RFC 4253 6.1
+		PeersWindow:   advInitialWindowSize,
+		MaxPacketSize: advMaxPacketSize,
 		raddr:         raddr,
 		rport:         uint32(rport),
 		laddr:         laddr,
